// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_LOCAL")
}

model User {
  id          Int         @id @unique @default(autoincrement())
  name        String      @db.VarChar(200)
  password    String      @db.VarChar(200)
  email       String      @db.VarChar(200) @unique
  roleId      Int         @db.Integer()

  logs        Logs[]
  role        Role        @relation(fields: [roleId], references: [id], onDelete: Cascade)

  created_at  DateTime    @default(now())
  @@map("user")
}

model Role {
  id          Int         @id @unique @default(autoincrement())
  name        String      @db.VarChar(200) @unique
  isAdmin     Boolean     @db.Boolean()

  user        User[]

  @@map("role")
}

model Category {
  id          Int         @id @unique @default(autoincrement())
  name        String      @db.VarChar(200) @unique

  product     Product[]

  @@map("category")
}

model Product {
  id          Int         @id @unique @default(autoincrement())
  categoryId  Int         @db.Integer()
  name        String      @db.VarChar(200) @unique
  description String      @db.VarChar(200)
  price       Float       @db.DoublePrecision()
  cost        Float       @db.DoublePrecision()

  sales       Sales[]
  logs        Logs[]
  category    Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt()

  @@map("product")
}

model Sales {
  id          Int         @id @unique @default(autoincrement())
  productId   Int         @db.Integer()
  count       Int         @db.Integer()
  unityPrice  Float       @db.DoublePrecision()
  totalPrice  Float       @db.DoublePrecision()

  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  created_at  DateTime    @default(now())

  @@map("sales")
}

model Logs {
  id          Int         @id @unique @default(autoincrement())
  userId      Int         @db.Integer()
  productId   Int         @db.Integer()
  action      String      @db.Text()

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("logs")
}
